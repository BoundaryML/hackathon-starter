###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import typing
from baml_py.baml_py import FieldType, EnumValueBuilder, EnumBuilder, ClassBuilder
from baml_py.type_builder import TypeBuilder as _TypeBuilder, ClassPropertyBuilder, ClassPropertyViewer, EnumValueViewer
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME


class TypeBuilder(_TypeBuilder):
    def __init__(self):
        super().__init__(classes=set(
          ["ComputeValue","GetWeatherReport","Message","MessageToUser","Query","Resume","State","WeatherReport",]
        ), enums=set(
          ["Role",]
        ), runtime=DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME)


    @property
    def ComputeValue(self) -> "ComputeValueAst":
        return ComputeValueAst(self)

    @property
    def GetWeatherReport(self) -> "GetWeatherReportAst":
        return GetWeatherReportAst(self)

    @property
    def Message(self) -> "MessageAst":
        return MessageAst(self)

    @property
    def MessageToUser(self) -> "MessageToUserAst":
        return MessageToUserAst(self)

    @property
    def Query(self) -> "QueryAst":
        return QueryAst(self)

    @property
    def Resume(self) -> "ResumeAst":
        return ResumeAst(self)

    @property
    def State(self) -> "StateAst":
        return StateAst(self)

    @property
    def WeatherReport(self) -> "WeatherReportAst":
        return WeatherReportAst(self)





class ComputeValueAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("ComputeValue")
        self._properties: typing.Set[str] = set([ "type",  "arithmetic_expression", ])
        self._props = ComputeValueProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ComputeValueProperties":
        return self._props


class ComputeValueViewer(ComputeValueAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ComputeValueProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def type(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("type"))

    @property
    def arithmetic_expression(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("arithmetic_expression"))

    

class GetWeatherReportAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("GetWeatherReport")
        self._properties: typing.Set[str] = set([ "type",  "location", ])
        self._props = GetWeatherReportProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "GetWeatherReportProperties":
        return self._props


class GetWeatherReportViewer(GetWeatherReportAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class GetWeatherReportProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def type(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("type"))

    @property
    def location(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("location"))

    

class MessageAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("Message")
        self._properties: typing.Set[str] = set([ "role",  "content",  "timestamp", ])
        self._props = MessageProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "MessageProperties":
        return self._props


class MessageViewer(MessageAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class MessageProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def role(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("role"))

    @property
    def content(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("content"))

    @property
    def timestamp(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("timestamp"))

    

class MessageToUserAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("MessageToUser")
        self._properties: typing.Set[str] = set([ "type",  "message", ])
        self._props = MessageToUserProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "MessageToUserProperties":
        return self._props


class MessageToUserViewer(MessageToUserAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class MessageToUserProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def type(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("type"))

    @property
    def message(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("message"))

    

class QueryAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("Query")
        self._properties: typing.Set[str] = set([ "message",  "timestamp", ])
        self._props = QueryProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "QueryProperties":
        return self._props


class QueryViewer(QueryAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class QueryProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def message(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("message"))

    @property
    def timestamp(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("timestamp"))

    

class ResumeAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("Resume")
        self._properties: typing.Set[str] = set([ "type", ])
        self._props = ResumeProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ResumeProperties":
        return self._props


class ResumeViewer(ResumeAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ResumeProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def type(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("type"))

    

class StateAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("State")
        self._properties: typing.Set[str] = set([ "weather_report",  "recent_messages", ])
        self._props = StateProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "StateProperties":
        return self._props


class StateViewer(StateAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class StateProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def weather_report(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("weather_report"))

    @property
    def recent_messages(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("recent_messages"))

    

class WeatherReportAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("WeatherReport")
        self._properties: typing.Set[str] = set([ "location",  "temperature",  "weather_status",  "timestamp", ])
        self._props = WeatherReportProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "WeatherReportProperties":
        return self._props


class WeatherReportViewer(WeatherReportAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class WeatherReportProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def location(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("location"))

    @property
    def temperature(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("temperature"))

    @property
    def weather_status(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("weather_status"))

    @property
    def timestamp(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("timestamp"))

    



class RoleAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("Role")
        self._values: typing.Set[str] = set([ "User",  "Assistant",  "Tool", ])
        self._vals = RoleValues(self._bldr, self._values)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "RoleValues":
        return self._vals


class RoleViewer(RoleAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    def list_values(self) -> typing.List[typing.Tuple[str, EnumValueViewer]]:
        return [(name, EnumValueViewer(self._bldr.value(name))) for name in self._values]


class RoleValues:
    def __init__(self, enum_bldr: EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values

    

    @property
    def User(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("User"))
    

    @property
    def Assistant(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("Assistant"))
    

    @property
    def Tool(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("Tool"))
    

    


__all__ = ["TypeBuilder"]