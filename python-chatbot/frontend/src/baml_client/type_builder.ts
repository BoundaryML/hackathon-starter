/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import { FieldType } from '@boundaryml/baml/native'
import { TypeBuilder as _TypeBuilder, EnumBuilder, EnumViewer, ClassBuilder, ClassViewer } from '@boundaryml/baml/type_builder'
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

export default class TypeBuilder {
    private tb: _TypeBuilder;
    
    ComputeValue: ClassViewer<'ComputeValue', "type" | "arithmetic_expression">;
    
    GetWeatherReport: ClassViewer<'GetWeatherReport', "type" | "location">;
    
    Message: ClassViewer<'Message', "role" | "content" | "timestamp">;
    
    MessageToUser: ClassViewer<'MessageToUser', "type" | "message">;
    
    Query: ClassViewer<'Query', "message" | "timestamp">;
    
    Resume: ClassViewer<'Resume', "type">;
    
    State: ClassViewer<'State', "weather_report" | "recent_messages">;
    
    WeatherReport: ClassViewer<'WeatherReport', "location" | "temperature" | "weather_status" | "timestamp">;
    
    
    Role: EnumViewer<'Role', "User" | "Assistant" | "Tool">;
    

    constructor() {
        this.tb = new _TypeBuilder({
          classes: new Set([
            "ComputeValue","GetWeatherReport","Message","MessageToUser","Query","Resume","State","WeatherReport",
          ]),
          enums: new Set([
            "Role",
          ]),
          runtime: DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME
        });
        
        this.ComputeValue = this.tb.classViewer("ComputeValue", [
          "type","arithmetic_expression",
        ]);
        
        this.GetWeatherReport = this.tb.classViewer("GetWeatherReport", [
          "type","location",
        ]);
        
        this.Message = this.tb.classViewer("Message", [
          "role","content","timestamp",
        ]);
        
        this.MessageToUser = this.tb.classViewer("MessageToUser", [
          "type","message",
        ]);
        
        this.Query = this.tb.classViewer("Query", [
          "message","timestamp",
        ]);
        
        this.Resume = this.tb.classViewer("Resume", [
          "type",
        ]);
        
        this.State = this.tb.classViewer("State", [
          "weather_report","recent_messages",
        ]);
        
        this.WeatherReport = this.tb.classViewer("WeatherReport", [
          "location","temperature","weather_status","timestamp",
        ]);
        
        
        this.Role = this.tb.enumViewer("Role", [
          "User","Assistant","Tool",
        ]);
        
    }

    __tb() {
      return this.tb._tb();
    }

    string(): FieldType {
        return this.tb.string()
    }

    literalString(value: string): FieldType {
        return this.tb.literalString(value)
    }

    literalInt(value: number): FieldType {
        return this.tb.literalInt(value)
    }

    literalBool(value: boolean): FieldType {
        return this.tb.literalBool(value)
    }

    int(): FieldType {
        return this.tb.int()
    }

    float(): FieldType {
        return this.tb.float()
    }

    bool(): FieldType {
        return this.tb.bool()
    }

    list(type: FieldType): FieldType {
        return this.tb.list(type)
    }

    null(): FieldType {
        return this.tb.null()
    }

    map(key: FieldType, value: FieldType): FieldType {
        return this.tb.map(key, value)
    }

    union(types: FieldType[]): FieldType {
        return this.tb.union(types)
    }

    addClass<Name extends string>(name: Name): ClassBuilder<Name> {
        return this.tb.addClass(name);
    }

    addEnum<Name extends string>(name: Name): EnumBuilder<Name> {
        return this.tb.addEnum(name);
    }

    addBaml(baml: string): void {
        this.tb.addBaml(baml);
    }
}